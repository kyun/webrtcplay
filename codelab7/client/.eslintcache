[{"/Users/kyun/workspace/playground/webrtcplay/codelab7/client/src/App.tsx":"1"},{"size":5438,"mtime":1612186033300,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"147wa86","/Users/kyun/workspace/playground/webrtcplay/codelab7/client/src/App.tsx",["7","8","9","10","11"],"import React from 'react';\nimport { io } from 'socket.io-client';\nimport adapter from 'webrtc-adapter';\n\nfunction randomToken() {\n  return Math.floor((1 + Math.random()) * 10).toString(4).substring(1);\n}\n\nfunction App() {\n  const videoRef = React.useRef<HTMLVideoElement>(null);\n  const photoRef = React.useRef<HTMLCanvasElement>(null);\n\n  React.useEffect(() => {\n    let isInitiator = true;\n    let socket = io('http://localhost:8080', { withCredentials: true });\n    room = window.location.hash = randomToken();\n    var room = window.location.hash.substring(1);\n\n    socket.on('ipaddr', (ip: string) => {\n      console.log(' SERVER IP = ' + ip);\n    });\n\n    socket.on('created', (room: any, clientId: any) => {\n      console.log('Created room', room, '- my client ID is', clientId);\n      grabWebCamVideo();\n\n    });\n\n    socket.on('joined', (room: any, clientId: any) => {\n      console.log('asdfasdf')\n      console.log('This peer has joined room', room, 'with client ID', clientId);\n      createPeerConnection(false);\n      grabWebCamVideo();\n    });\n\n    socket.on('ready', () => {\n      console.log('Socket is ready');\n      createPeerConnection(true);\n    });\n\n    socket.on('log', function(array: any) {\n      console.log.apply(console, array);\n    });\n\n    socket.emit('create or join', room);\n    if (window.location.hostname.match(/localhost|127\\.0\\.0/)) {\n      socket.emit('ipaddr');\n    }\n\n    socket.on('disconnect', (reason: any) => {\n      console.log('Disconnected: ' + reason);\n    });\n\n\n\n  }, []);\n\n  function grabWebCamVideo() {\n    console.log('Getting user media (video) ... ');\n    navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true,\n    }).then(gotStream);\n  }\n  function gotStream(stream: any) {\n    console.log('getUserMedia video stream URL:', stream);\n    // window.stream = stream;\n    videoRef.current!.srcObject = stream;\n    videoRef.current!.onloadedmetadata = function () {\n      photoRef.current!.width = videoRef.current!.videoWidth;\n      photoRef.current!.height = videoRef.current!.videoHeight;\n    }\n  }\n\n  function createPeerConnection(isInitiator: boolean) {\n    console.log('Creating Peer connection as initiator?', isInitiator);\n\n    const peerConn = new RTCPeerConnection();\n    peerConn.onicecandidate = function (event: any) {\n      console.log('icecandidate event:', event);\n      if (event.candidate) {\n        sendMessage({\n          type: 'candidate',\n          label: event.candidate.sdpMLineIndex,\n          id: event.candidate.sdpMid,\n          candidate: event.candidate.candidate\n        });\n      } else {\n        console.log('End of candidates.');\n      }\n    };\n\n    if (isInitiator) {\n      console.log('Creating Data Channel');\n      let dataChannel = peerConn.createDataChannel('photos');\n      onDataChannelCreated(dataChannel);\n\n      console.log('Creating an offer');\n      peerConn.createOffer().then((offer: any) => {\n        return peerConn.setLocalDescription(offer);\n      }).then(() => {\n        console.log('sending local desc: ', peerConn.localDescription);\n        sendMessage(peerConn.localDescription);\n      });\n    } else {\n      peerConn.ondatachannel = function (event: any) {\n        console.log('ondatachannel:', event.channel);\n        let dataChannel = event.channel;\n        onDataChannelCreated(dataChannel);\n      }\n    }\n\n  }\n  function sendMessage(message: any) {\n    let socket = io();\n    console.log('Client sending message: ', message);\n    socket.emit('message', message);\n  }\n  function onDataChannelCreated(channel: any) {\n    console.log('onDataChannelCreated:', channel);\n\n    channel.onopen = function () {\n      console.log('channel opened.');\n    };\n    channel.onclose = function () {\n      console.log('channel closed.');\n    }\n\n    channel.onmessage = receiveDataChromeFactory();\n    function receiveDataChromeFactory() {\n      let buf: any, count: any;\n\n      return function onmessage(event: any) {\n        if (typeof event.data === 'string') {\n          buf = new Uint8ClampedArray(parseInt(event.data));\n          count = 0;\n          console.log('expecting a total of ' + buf.byteLength + ' bytes');\n          return;\n        }\n        let data = new Uint8ClampedArray(event.data);\n        buf.set(data, count);\n        count += data.byteLength;\n        console.log('count: ' + count);\n        if (count === buf.byteLength) {\n          // we're done: all data chunks have been received\n          console.log('Done. Rendering photo.');\n          renderPhoto(buf);\n        }\n      }\n    }\n  }\n\n  function renderPhoto(data: any) {\n    let canvas = document.createElement('canvas');\n\n  }\n\n  function snapPhoto() {\n    console.log(videoRef.current);\n    photoRef.current!.getContext('2d')?.drawImage(videoRef.current as any, 0, 0, photoRef.current!.width, photoRef.current!.height);\n  }\n  return (\n    <div className=\"App\">\n      <h1>Realtime communication with WebRTC</h1>\n\n      <div id=\"videoCanvas\">\n        <video ref={videoRef} id=\"camera\" autoPlay playsInline></video>\n        <canvas ref={photoRef} id=\"photo\"></canvas>\n      </div>\n\n      <div id=\"buttons\">\n        <button onClick={snapPhoto}>Snap</button><span> then </span><button id=\"send\">Send</button>\n        <span> or </span>\n        <button id=\"snapAndSend\">Snap &amp; Send</button>\n      </div>\n\n      <div id=\"incoming\">\n        <h2>Incoming photos</h2>\n        <div id=\"trail\"></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"12","severity":1,"message":"13","line":3,"column":8,"nodeType":"14","messageId":"15","endLine":3,"endColumn":15},{"ruleId":"12","severity":1,"message":"16","line":14,"column":9,"nodeType":"14","messageId":"15","endLine":14,"endColumn":20},{"ruleId":"17","severity":1,"message":"18","line":16,"column":5,"nodeType":"14","messageId":"19","endLine":16,"endColumn":9},{"ruleId":"20","severity":1,"message":"21","line":56,"column":6,"nodeType":"22","endLine":56,"endColumn":8,"suggestions":"23"},{"ruleId":"12","severity":1,"message":"24","line":154,"column":9,"nodeType":"14","messageId":"15","endLine":154,"endColumn":15},"@typescript-eslint/no-unused-vars","'adapter' is defined but never used.","Identifier","unusedVar","'isInitiator' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'room' was used before it was defined.","noUseBeforeDefine","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'createPeerConnection' and 'grabWebCamVideo'. Either include them or remove the dependency array.","ArrayExpression",["25"],"'canvas' is assigned a value but never used.",{"desc":"26","fix":"27"},"Update the dependencies array to be: [createPeerConnection, grabWebCamVideo]",{"range":"28","text":"29"},[1515,1517],"[createPeerConnection, grabWebCamVideo]"]